import random
import os
import requests
from openpyxl import load_workbook
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters,
)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∑–∞–¥–∞–Ω—ã –≤ Railway)
ACCESS_TOKEN      = os.getenv("ACCESS_TOKEN")
MEDIA_ID          = os.getenv("MEDIA_ID")
TELEGRAM_TOKEN    = os.getenv("TELEGRAM_TOKEN")
DOWNLOAD_PASSWORD = os.getenv("DOWNLOAD_PASSWORD")

EXCEL_FILE = 'promo_codes_test.xlsx'
SHEET_NAME = '–õ–∏—Å—Ç1'

# –¢–µ–∫—Å—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
ASK_USERNAME = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π Instagram-–Ω–∏–∫–Ω–µ–π–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, @yourname)"
SUCCESS_MESSAGE_TEMPLATE = "üéÅ –¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: *{promo_code}*"
ALREADY_MESSAGE = "üéâ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥."
NO_CODES_MESSAGE = "üòî –ü—Ä–æ–º–æ–∫–æ–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å."
FAIL_MESSAGE = ("üòï –¢—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ —É—Å–ª–æ–≤–∏—è.\n"
                "–ü—Ä–æ–≤–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
                "1. –ü–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —Ç—ã –Ω–∞ @aviashow.kz\n"
                "2. –õ–∞–π–∫–Ω—É–ª –ª–∏ –ø–æ—Å—Ç —Å —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º\n"
                "3. –û—Ç–º–µ—Ç–∏–ª 2 –¥—Ä—É–∑–µ–π –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–¥ –ø–æ—Å—Ç–æ–º\n\n"
                "üîÅ –ö–æ–≥–¥–∞ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ ‚Äî –æ—Ç–ø—Ä–∞–≤—å –Ω–∏–∫ –µ—â—ë —Ä–∞–∑.")
ASK_PASS     = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞."
WRONG_PASS   = "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
FILE_MISSING = "üö´ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."

# --- –†–∞–±–æ—Ç–∞ —Å Excel-—Ñ–∞–π–ª–æ–º ---

def load_rows():
    wb = load_workbook(EXCEL_FILE)
    ws = wb[SHEET_NAME]
    rows = list(ws.iter_rows(min_row=2, values_only=False))
    wb.close()
    return rows

def user_already_got(username: str) -> bool:
    for row in load_rows():
        used = row[3].value  # —Å—Ç–æ–ª–±–µ—Ü D ‚Äî Used
        if used and used.lower() == username.lower():
            return True
    return False

def get_unused_codes():
    free = []
    for row in load_rows():
        code = row[0].value
        used = row[3].value
        if code and not used:
            free.append((code, row[0].row))
    return free

def mark_code_as_used(row_number: int, username: str):
    wb = load_workbook(EXCEL_FILE)
    ws = wb[SHEET_NAME]
    ws.cell(row=row_number, column=4, value=username)
    wb.save(EXCEL_FILE)
    wb.close()

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ Instagram ---

def has_user_commented(username: str) -> bool:
    url = f"https://graph.facebook.com/v19.0/{MEDIA_ID}/comments"
    params = {
        'access_token': ACCESS_TOKEN,
        'fields': 'username,text',
        'limit': 100
    }
    while url:
        resp = requests.get(url, params=params).json()
        for c in resp.get('data', []):
            if c.get('username', '').lower() == username.lower():
                return True
        url = resp.get('paging', {}).get('next')
    return False

# --- –•–µ–Ω–¥–ª–µ—Ä—ã Telegram ---

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    # –µ—Å–ª–∏ –±–æ—Ç –∂–¥—ë—Ç –ø–∞—Ä–æ–ª—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if context.user_data.get('awaiting_password'):
        return

    # —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∏–∫–Ω–µ–π–º
    username = text.lstrip('@')

    # 1) –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –ø–æ–ª—É—á–∞–ª?
    if user_already_got(username):
        await update.message.reply_text(ALREADY_MESSAGE)
        return

    # 2) –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    await update.message.reply_text(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç @{username}‚Ä¶")
    if not has_user_commented(username):
        await update.message.reply_text(FAIL_MESSAGE)
        return

    # 3) –≤—ã–¥–∞—á–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    free = get_unused_codes()
    if not free:
        await update.message.reply_text(NO_CODES_MESSAGE)
        return

    code, row = random.choice(free)
    mark_code_as_used(row, username)
    await update.message.reply_text(
        SUCCESS_MESSAGE_TEMPLATE.format(promo_code=code),
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ /download
async def download_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(ASK_PASS)
    context.user_data['awaiting_password'] = True

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
async def check_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_password'):
        return
    if update.message.text.strip() == DOWNLOAD_PASSWORD:
        if os.path.exists(EXCEL_FILE):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–∫ .xlsx
            with open(EXCEL_FILE, 'rb') as f:
                await update.message.reply_document(
                    InputFile(f, filename="promo_codes.xlsx")
                )
        else:
            await update.message.reply_text(FILE_MISSING)
    else:
        await update.message.reply_text(WRONG_PASS)
    context.user_data['awaiting_password'] = False

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("download", download_cmd))
    # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_password))
    # –ø–æ—Ç–æ–º ‚Äî –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == '__main__':
    main()
