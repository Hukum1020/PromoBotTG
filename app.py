import os
import random
import json
import logging
import requests
from oauth2client.service_account import ServiceAccountCredentials
import gspread
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    logging.basicConfig(
        format="%(asctime)s %(levelname)s %(message)s", level=logging.INFO
    )

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ACCESS_TOKEN       = os.getenv("ACCESS_TOKEN")         # Page Access Token
MEDIA_ID           = os.getenv("MEDIA_ID")             # Instagram Business Account ID
TELEGRAM_TOKEN     = os.getenv("TELEGRAM_TOKEN")       # Telegram Bot Token
DOWNLOAD_PASSWORD  = os.getenv("DOWNLOAD_PASSWORD")    # –ü–∞—Ä–æ–ª—å –¥–ª—è /download
CREDENTIALS_JSON   = os.getenv("GOOGLE_CREDENTIALS_JSON")
SPREADSHEET_ID     = os.getenv("SHEET_ID")             # ID Google Sheet

# –°–æ–æ–±—â–µ–Ω–∏—è
START_MESSAGE = """–ü—Ä–∏–≤–µ—Ç! üëã  
–¢—ã –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ —É—á–∞—Å—Ç–∏—é –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ VIP-–±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –∞–≤–∏–∞—à–æ—É ¬´–ù–µ–±–æ –ë–∞–π—Å–µ—Ä–∫–µ ‚Äì 2025¬ª ‚úàüéÅ –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç –ü–û–î–ê–†–û–ö ‚Äî –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É 10% –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–∏–ª–µ—Ç!
–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –≤—ã–¥–∞—Ç—å —Ç–µ–±–µ –ø—Ä–æ–º–æ–∫–æ–¥, –¥–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ —É—Å–ª–æ–≤–∏—è üëá"""

ASK_USERNAME = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π Instagram-–Ω–∏–∫–Ω–µ–π–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, @yourname)"

SUCCESS_MESSAGE_TEMPLATE = """‚úÖ –û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ @aviashow.kz  
‚Ä¢ –õ–∞–π–∫ –Ω–∞ –ø–æ—Å—Ç —Å —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º  
‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –æ—Ç–º–µ—Ç–∫–æ–π –¥–≤—É—Ö –¥—Ä—É–∑–µ–π
üéÅ –í–æ—Ç —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: *{promo_code}*

üí° –ò—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –Ω–∞ [ticketon.kz](https://ticketon.kz) –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ –∏ –ø–æ–ª—É—á–∏ —Å–∫–∏–¥–∫—É:
- –¥–æ 31 –º–∞—è ‚Äî 3000 ‚Ç∏  
- —Å 1 –∏—é–Ω—è –ø–æ 31 –∏—é–ª—è ‚Äî 4000 ‚Ç∏  
- —Å 1 –ø–æ 17 –∞–≤–≥—É—Å—Ç–∞ ‚Äî 5000 ‚Ç∏

–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –∏ —É–¥–∞—á–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! –ò—Ç–æ–≥–∏ ‚Äî 1 –∏—é–Ω—è!"""

FAIL_MESSAGE = """üòï –¢—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ —É—Å–ª–æ–≤–∏—è.  
–ü—Ä–æ–≤–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:
1. –ü–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —Ç—ã –Ω–∞ @aviashow.kz  
2. –õ–∞–π–∫ –Ω–∞ –ø–æ—Å—Ç —Å —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º  
3. –û—Ç–º–µ—Ç–∏–ª 2 –¥—Ä—É–∑–µ–π –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–¥ –ø–æ—Å—Ç–æ–º

üîÅ –ö–æ–≥–¥–∞ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –Ω–∏–∫ —Å–Ω–æ–≤–∞. –Ø –ø—Ä–æ–≤–µ—Ä—é –µ—â—ë —Ä–∞–∑!"""

WINNER_MESSAGE = """üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –≤—ã–∏–≥—Ä–∞–ª VIP-–±–∏–ª–µ—Ç –Ω–∞ –∞–≤–∏–∞—à–æ—É ¬´–ù–µ–±–æ –ë–∞–π—Å–µ—Ä–∫–µ ‚Äì 2025¬ª!
–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π, —á—Ç–æ–±—ã –≤—ã—Å–ª–∞—Ç—å –±–∏–ª–µ—Ç.  
–°–ª–µ–¥–∏ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ —Å—Ç–æ—Ä–∏—Å –∏ –¥–æ –≤—Å—Ç—Ä–µ—á–∏ 17 –∞–≤–≥—É—Å—Ç–∞ –Ω–∞ –∞—ç—Ä–æ–¥—Ä–æ–º–µ –ë–∞–π—Å–µ—Ä–∫–µ!"""

ASK_PASS     = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞."
WRONG_PASS   = "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
FILE_MISSING = "üö´ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π CREDENTIALS_JSON
SCOPE = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive",
]

def init_sheet():
    try:
        creds_dict = json.loads(CREDENTIALS_JSON)
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ –∫–ª—é—á–µ
        creds_dict["private_key"] = creds_dict["private_key"].replace("\\n", "\n").strip()
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, SCOPE)
        client = gspread.authorize(creds)
        sheet = client.open_by_key(SPREADSHEET_ID).sheet1
        return sheet
    except Exception as e:
        raise ValueError(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤

def load_promo_codes(sheet):
    all_values = sheet.get_all_values()
    free = []
    given = {}
    for idx, row in enumerate(all_values[1:], start=2):
        code = row[0].strip()
        used = row[3].strip() if len(row) > 3 else ""
        if used:
            given[used.lower()] = code
        else:
            free.append((code, idx))
    return free, given

def mark_code_as_used(sheet, row_idx, username):
    sheet.update_cell(row_idx, 4, username)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ Instagram

def has_user_commented(username):
    url = f"https://graph.facebook.com/v22.0/{MEDIA_ID}/comments"
    params = {
        "access_token": ACCESS_TOKEN,
        "fields": "username,text",
        "limit": 100,
    }
    commenters = []
    while url:
        resp = requests.get(url, params=params).json()
        for c in resp.get("data", []):
            commenters.append(c.get("username", "").lower())
        url = resp.get("paging", {}).get("next")
    logging.info(f"üõ† Debug ‚Äî –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —é–∑–µ—Ä—ã: {commenters}")
    return username.lower() in commenters

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram

def register_handlers(app, sheet):
    async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text.strip()
        # –ü–∞—Ä–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
        if context.user_data.get("awaiting_password"):
            context.user_data["awaiting_password"] = False
            if text == DOWNLOAD_PASSWORD:
                # —ç–∫—Å–ø–æ—Ä—Ç Google Sheet –≤ xlsx
                download_url = (
                    f"https://docs.google.com/spreadsheets/d/{SPREADSHEET_ID}/export?format=xlsx"
                )
                token = sheet.client.auth.access_token
                headers = {"Authorization": f"Bearer {token}"}
                r = requests.get(download_url, headers=headers)
                if r.status_code == 200:
                    await update.message.reply_document(
                        document=r.content,
                        filename="promo_codes.xlsx"
                    )
                else:
                    await update.message.reply_text(FILE_MISSING)
            else:
                await update.message.reply_text(WRONG_PASS)
            return

        # –ö–æ–º–∞–Ω–¥–∞ /download
        if text.lower() == "/download":
            context.user_data["awaiting_password"] = True
            await update.message.reply_text(ASK_PASS)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∏–∫–Ω–µ–π–º–∞
        username = text.lstrip("@").lower()
        await update.message.reply_text(START_MESSAGE)
        await update.message.reply_text(ASK_USERNAME)

        free, given = load_promo_codes(sheet)
        if username in given:
            await update.message.reply_text(
                WINNER_MESSAGE if False else
                SUCCESS_MESSAGE_TEMPLATE.format(promo_code=given[username]),
                parse_mode="Markdown"
            )
            return

        await update.message.reply_text(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç @{username}‚Ä¶")
        if not has_user_commented(username):
            await update.message.reply_text(FAIL_MESSAGE)
            return

        if not free:
            await update.message.reply_text("üòî –ü—Ä–æ–º–æ–∫–æ–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
            return
        code, row = random.choice(free)
        mark_code_as_used(sheet, row, username)
        await update.message.reply_text(
            SUCCESS_MESSAGE_TEMPLATE.format(promo_code=code),
            parse_mode="Markdown"
        )

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

def main():
    setup_logging()
    sheet = init_sheet()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    register_handlers(app, sheet)
    app.run_polling()

if __name__ == "__main__":
    main()
