import random
import requests
import os
from openpyxl import load_workbook
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters,
)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
ACCESS_TOKEN      = os.getenv("ACCESS_TOKEN")
MEDIA_ID          = os.getenv("MEDIA_ID")
TELEGRAM_TOKEN    = os.getenv("TELEGRAM_TOKEN")
DOWNLOAD_PASSWORD = os.getenv("DOWNLOAD_PASSWORD")

EXCEL_FILE = 'promo_codes_test.xlsx'
SHEET_NAME = '–õ–∏—Å—Ç1'

# –¢–µ–∫—Å—Ç—ã
START_MESSAGE = "–ü—Ä–∏–≤–µ—Ç! üëã ‚Ä¶"
ASK_USERNAME  = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π Instagram-–Ω–∏–∫–Ω–µ–π–º‚Ä¶"
FAIL_MESSAGE  = "üòï –¢—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ —É—Å–ª–æ–≤–∏—è‚Ä¶"
SUCCESS_TEMPLATE = "‚úÖ –í–æ—Ç —Ç–≤–æ–π –∫–æ–¥: *{promo_code}*"
ASK_PASS    = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞."
WRONG_PASS  = "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å."
FILE_MISSING = "üö´ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."

# --- –†–∞–±–æ—Ç–∞ —Å Excel ---
def load_workbook_data():
    wb = load_workbook(EXCEL_FILE)
    ws = wb[SHEET_NAME]
    data = list(ws.iter_rows(min_row=2, values_only=False))
    wb.close()
    return data

def find_unused_codes():
    rows = load_workbook_data()
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º [(–∫–æ–¥, –Ω–æ–º–µ—Ä_—Å—Ç—Ä–æ–∫–∏), ...]
    return [
        (r[0].value, r[0].row)
        for r in rows
        if r[0].value and not r[3].value
    ]

def user_already_got(username):
    rows = load_workbook_data()
    return any(r[3].value and r[3].value.lower() == username.lower()
               for r in rows)

def mark_code(row, user):
    wb = load_workbook(EXCEL_FILE)
    ws = wb[SHEET_NAME]
    ws.cell(row=row, column=4, value=user)
    wb.save(EXCEL_FILE)
    wb.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
def has_commented(username):
    url = f"https://graph.facebook.com/v19.0/{MEDIA_ID}/comments"
    params = {
        'access_token': ACCESS_TOKEN,
        'fields': 'username,text',
        'limit': 100,
    }
    while url:
        resp = requests.get(url, params=params).json()
        # –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print("Got comments chunk:", resp.get("data", []))
        for c in resp.get("data", []):
            if c['username'].lower() == username.lower():
                return True
        url = resp.get("paging", {}).get("next")
    return False

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

# /start
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(START_MESSAGE)
    await update.message.reply_text(ASK_USERNAME)

# –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (–Ω–∏ –Ω–µ–Ω—É–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å, –Ω–∏ –∫–æ–º–∞–Ω–¥–∞)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –µ—Å–ª–∏ –∂–¥—ë–º –ø–∞—Ä–æ–ª—å ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä
    if context.user_data.get('awaiting_password'):
        return

    username = update.message.text.strip().lstrip('@')
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è
    if user_already_got(username):
        await update.message.reply_text("üéâ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥.")
        return

    await update.message.reply_text(f"–ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π @{username}‚Ä¶")
    if not has_commented(username):
        await update.message.reply_text(FAIL_MESSAGE)
        return

    codes = find_unused_codes()
    if not codes:
        await update.message.reply_text("üòî –ü—Ä–æ–º–æ–∫–æ–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
        return

    code, row = random.choice(codes)
    mark_code(row, username)
    await update.message.reply_text(
        SUCCESS_TEMPLATE.format(promo_code=code),
        parse_mode='Markdown'
    )

# /download ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–∞—Ä–æ–ª—è
async def download_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(ASK_PASS)
    context.user_data['awaiting_password'] = True

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
async def check_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_password'):
        return  # –Ω–µ –≤ —Ä–µ–∂–∏–º–µ ¬´–∂–¥—É –ø–∞—Ä–æ–ª—å¬ª
    text = update.message.text.strip()
    if text == DOWNLOAD_PASSWORD:
        if os.path.exists(EXCEL_FILE):
            await update.message.reply_document(InputFile(EXCEL_FILE, filename="promo_codes.xlsx"))
        else:
            await update.message.reply_text(FILE_MISSING)
    else:
        await update.message.reply_text(WRONG_PASS)
    # –≤—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è
    context.user_data['awaiting_password'] = False

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start",    start_cmd))
    app.add_handler(CommandHandler("download", download_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_password))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == '__main__':
    main()
