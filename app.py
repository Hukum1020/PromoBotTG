import os
import random
import json
import logging
import requests
from oauth2client.service_account import ServiceAccountCredentials
import gspread
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
def setup_logging():
    logging.basicConfig(
        format="%(asctime)s %(levelname)s %(message)s",
        level=logging.INFO
    )

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
ACCESS_TOKEN       = os.getenv("ACCESS_TOKEN")
MEDIA_ID           = os.getenv("MEDIA_ID")
TELEGRAM_TOKEN     = os.getenv("TELEGRAM_TOKEN")
DOWNLOAD_PASSWORD  = os.getenv("DOWNLOAD_PASSWORD")
CREDENTIALS_JSON   = os.getenv("GOOGLE_CREDENTIALS")
SPREADSHEET_ID     = os.getenv("SHEET_ID")

# --- –¢–µ–∫—Å—Ç—ã ---
START_MESSAGE = """–ü—Ä–∏–≤–µ—Ç! üëã  
–¢—ã –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ —É—á–∞—Å—Ç–∏—é –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ VIP-–±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –∞–≤–∏–∞—à–æ—É ¬´–ù–µ–±–æ –ë–∞–π—Å–µ—Ä–∫–µ ‚Äì 2025¬ª ‚úàüéÅ
–ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç –ü–û–î–ê–†–û–ö ‚Äî –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É 10% –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–∏–ª–µ—Ç!
–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –≤—ã–¥–∞—Ç—å —Ç–µ–±–µ –ø—Ä–æ–º–æ–∫–æ–¥, –¥–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ —É—Å–ª–æ–≤–∏—è üëá
"""
ASK_USERNAME = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π Instagram-–Ω–∏–∫–Ω–µ–π–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, @yourname)"
SUCCESS_MESSAGE_TEMPLATE = """‚úÖ –û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ @aviashow.kz  
‚Ä¢ –õ–∞–π–∫ –Ω–∞ –ø–æ—Å—Ç —Å —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º  
‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –æ—Ç–º–µ—Ç–∫–æ–π –¥–≤—É—Ö –¥—Ä—É–∑–µ–π  
üéÅ –í–æ—Ç —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: *{promo_code}*"""
FAIL_MESSAGE = """üòï –¢—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ —É—Å–ª–æ–≤–∏—è.  
1. –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ @aviashow.kz  
2. –õ–∞–π–∫–Ω—É–ª –ø–æ—Å—Ç  
3. –û—Ç–º–µ—Ç–∏–ª 2 –¥—Ä—É–∑–µ–π  
üîÅ –ö–æ–≥–¥–∞ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–∏–∫ —Å–Ω–æ–≤–∞."""
ASK_PASS     = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞."
WRONG_PASS   = "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
FILE_MISSING = "üö´ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."

# --- Google Sheets init ---
SCOPE = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive",
]
def init_sheet():
    if not CREDENTIALS_JSON:
        raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_CREDENTIALS")
    try:
        creds_dict = json.loads(CREDENTIALS_JSON)
        creds_dict["private_key"] = creds_dict["private_key"].replace("\\n", "\n")
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, SCOPE)
        client = gspread.authorize(creds)
        return client.open_by_key(SPREADSHEET_ID).sheet1
    except Exception as e:
        raise ValueError(f"‚ùå –û—à–∏–±–∫–∞ Google Sheets: {e}")

# --- –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ ---
def load_promo_codes(sheet):
    all_values = sheet.get_all_values()
    free = []
    given = {}
    for idx, row in enumerate(all_values[1:], start=2):
        code = row[0].strip()
        used = row[3].strip() if len(row) > 3 else ""
        if used:
            given[used.lower()] = code
        else:
            free.append((code, idx))
    return free, given

def mark_code_as_used(sheet, row_idx, username):
    sheet.update_cell(row_idx, 4, username)

# --- –ò–Ω—Å—Ç–∞–≥—Ä–∞–º ---
def has_user_commented(username):
    url = f"https://graph.facebook.com/v22.0/{MEDIA_ID}/comments"
    params = {"access_token": ACCESS_TOKEN, "fields": "username,text", "limit": 100}
    commenters = []
    while url:
        resp = requests.get(url, params=params).json()
        for c in resp.get("data", []):
            commenters.append(c.get("username", "").lower())
        url = resp.get("paging", {}).get("next")
    logging.info(f"üõ† Debug ‚Äî –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —é–∑–µ—Ä—ã: {commenters}")
    return username.lower() in commenters

# --- –•–µ–Ω–¥–ª–µ—Ä—ã Telegram ---
def register_handlers(app, sheet):

    # /start
    async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        # —Å–±—Ä–æ—Å–∏–º —Ñ–ª–∞–≥–∏
        context.user_data.clear()
        await update.message.reply_text(START_MESSAGE)
        await update.message.reply_text(ASK_USERNAME)

    # /download
    async def download_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data["awaiting_password"] = True
        await update.message.reply_text(ASK_PASS)

    # –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –ø—Ä–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text.strip()

        # 1) –µ—Å–ª–∏ –∂–¥—ë–º –ø–∞—Ä–æ–ª—å
        if context.user_data.get("awaiting_password"):
            context.user_data["awaiting_password"] = False
            if text == DOWNLOAD_PASSWORD:
                # —Å–∫–∞—á–∏–≤–∞–µ–º xlsx
                url = f"https://docs.google.com/spreadsheets/d/{SPREADSHEET_ID}/export?format=xlsx"
                token = sheet.client.auth.access_token
                r = requests.get(url, headers={"Authorization": f"Bearer {token}"})
                if r.status_code == 200:
                    await update.message.reply_document(
                        document=r.content, filename="promo_codes.xlsx"
                    )
                else:
                    await update.message.reply_text(FILE_MISSING)
            else:
                await update.message.reply_text(WRONG_PASS)
            return

        # 2) –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ (–Ω–æ –Ω–µ /start –∏–ª–∏ /download) ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        if text.startswith("/"):
            return

        # 3) –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∏–∫–Ω–µ–π–º–∞
        username = text.lstrip("@").lower()

        free, given = load_promo_codes(sheet)
        if username in given:
            await update.message.reply_text(
                f"üëÄ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥: {given[username]}"
            )
            return

        await update.message.reply_text(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç @{username}‚Ä¶")
        if not has_user_commented(username):
            await update.message.reply_text(FAIL_MESSAGE)
            return

        if not free:
            await update.message.reply_text("üòî –ü—Ä–æ–º–æ–∫–æ–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
            return

        code, row = random.choice(free)
        mark_code_as_used(sheet, row, username)
        await update.message.reply_text(
            SUCCESS_MESSAGE_TEMPLATE.format(promo_code=code),
            parse_mode="Markdown"
        )

    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    app.add_handler(CommandHandler("start", start_handler))
    app.add_handler(CommandHandler("download", download_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    setup_logging()
    sheet = init_sheet()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    register_handlers(app, sheet)
    app.run_polling()

if __name__ == "__main__":
    main()
