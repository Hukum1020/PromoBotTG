import os
import random
import requests

import gspread
from oauth2client.service_account import ServiceAccountCredentials

from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters,
)

# ==== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ====
ACCESS_TOKEN       = os.getenv("ACCESS_TOKEN")
MEDIA_ID           = os.getenv("MEDIA_ID")
TELEGRAM_TOKEN     = os.getenv("TELEGRAM_TOKEN")
DOWNLOAD_PASSWORD  = os.getenv("DOWNLOAD_PASSWORD")
GOOGLE_CREDENTIALS = os.getenv("GOOGLE_CREDENTIALS_JSON")
SHEET_ID           = os.getenv("SHEET_ID")  # ID –≤–∞—à–µ–π Google Sheet

# ==== –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets ====
scope = ["https://spreadsheets.google.com/feeds",
         "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(
    data = json.loads(GOOGLE_CREDENTIALS),
    scopes = scope
)
gc = gspread.authorize(creds)
sh = gc.open_by_key(SHEET_ID)
ws = sh.sheet1  # –ª–∏–±–æ .worksheet("–õ–∏—Å—Ç1") –µ—Å–ª–∏ —É –≤–∞—Å –¥—Ä—É–≥–æ–π –ª–∏—Å—Ç

# ==== –°–æ–æ–±—â–µ–Ω–∏—è ====
START_MESSAGE = """–ü—Ä–∏–≤–µ—Ç! üëã  
–¢—ã –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ —É—á–∞—Å—Ç–∏—é‚Ä¶"""
ASK_USERNAME = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π Instagram-–Ω–∏–∫–Ω–µ–π–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, @yourname)"
SUCCESS_MESSAGE_TEMPLATE = """‚úÖ –û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: ‚Ä¶ *{promo_code}* ‚Ä¶"""
FAIL_MESSAGE   = """üòï –¢—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ —É—Å–ª–æ–≤–∏—è‚Ä¶"""
ALREADY_GOT    = "‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ."
ASK_PASSWORD  = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞."
WRONG_PASS    = "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å."
FILE_NOT_FOUND= "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª."

# ==== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥—É–≥–ª-—Ç–∞–±–ª–∏—Ü—ã ====
def load_promo_codes():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ–¥–æ–≤ [(code, row_index), ...]
    –∏ —Å–ª–æ–≤–∞—Ä—å —É–∂–µ –≤—ã–¥–∞–Ω–Ω—ã—Ö {username: row_index, ...}
    """
    data = ws.get_all_values()
    free = []
    given = {}
    # –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ 0, –¥–∞–Ω–Ω—ã–µ —Å 1
    for i, row in enumerate(data[1:], start=2):
        code = row[0].strip()
        used = row[3].strip() if len(row) > 3 else ""
        if used:
            given[used.lower()] = i
        else:
            free.append((code, i))
    return free, given

def mark_code_as_used(row_index: int, username: str):
    ws.update_cell(row_index, 4, username)  # column D = 4

# ==== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ Instagram ====
def has_user_commented(username: str) -> bool:
    url = f"https://graph.facebook.com/v19.0/{MEDIA_ID}/comments"
    params = {
        "access_token": ACCESS_TOKEN,
        "fields": "username,text",
        "limit": 100,
    }
    while url:
        resp = requests.get(url, params=params).json()
        for c in resp.get("data", []):
            if c["username"].lower() == username.lower():
                return True
        url = resp.get("paging", {}).get("next")
    return False

# ==== –•–µ–Ω–¥–ª–µ—Ä—ã Telegram ====
async def handle_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.message.text.strip().lstrip("@").lower()
    await update.message.reply_text(f"üîé –ü—Ä–æ–≤–µ—Ä—è—é @{username}‚Ä¶")

    # 1) –ø—Ä–æ–≤–µ—Ä—è–µ–º Instagram-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    if not has_user_commented(username):
        return await update.message.reply_text(FAIL_MESSAGE)

    # 2) –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∏ —É–∂–µ –≤—ã–¥–∞–Ω–Ω—ã—Ö
    free, given = load_promo_codes()

    # 3) –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ given ‚Äî —à–ª—ë–º ALREADY_GOT
    if username in given:
        return await update.message.reply_text(ALREADY_GOT)

    # 4) –∏–Ω–∞—á–µ ‚Äî –≤—ã–¥–∞—ë–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–¥ –∏ –ø–æ–º–µ—á–∞–µ–º –µ–≥–æ
    if not free:
        return await update.message.reply_text("üòî –ü—Ä–æ–º–æ–∫–æ–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
    code, row = random.choice(free)
    mark_code_as_used(row, username)
    return await update.message.reply_text(
        SUCCESS_MESSAGE_TEMPLATE.format(promo_code=code),
        parse_mode="Markdown"
    )

async def download_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(ASK_PASSWORD)
    context.user_data["awaiting_password"] = True

async def check_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("awaiting_password"):
        return  # –Ω–µ –∂–¥—ë–º –ø–∞—Ä–æ–ª—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    pwd = update.message.text.strip()
    context.user_data["awaiting_password"] = False

    if pwd != DOWNLOAD_PASSWORD:
        return await update.message.reply_text(WRONG_PASS)

    # —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Ç–∞–±–ª–∏—Ü—É –≤ Excel –∏ –æ—Ç—Å—ã–ª–∞–µ–º
    # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ gspread + —ç–∫—Å–ø–æ—Ä—Ç Google Drive API
    download_url = (
      f"https://docs.google.com/spreadsheets/d/{SHEET_ID}/export"
      "?format=xlsx"
    )
    headers = {"Authorization": f"Bearer {creds.get_access_token().access_token}"}
    resp = requests.get(download_url, headers=headers)
    if resp.status_code == 200:
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç .xlsx
        return await update.message.reply_document(
            document=resp.content,
            filename="promo_codes.xlsx",
            parse_mode=None
        )
    else:
        return await update.message.reply_text(FILE_NOT_FOUND)

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("download", download_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_password))
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –ø–∞—Ä–æ–ª—è: –≤—ã–¥–∞—á–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_username))
    app.run_polling()

if __name__ == "__main__":
    import json
    main()
